#!/usr/bin/env node
(function() {

	var fs = require('fs');
	var utf8 = require('utf8');
	var q = require('../q.js');
	var strings = process.argv.splice(2);
	var stdin = process.stdin;
	var data;
	var timeout;
	var action;
	var options = {};
	var log = console.log;

	var main = function() {
		var option = strings[0];
		var count = 0;

		if (/^(?:-h|--help|undefined)$/.test(option)) {
			log(
				'q v%s - http://mths.be/q',
				q.version
			);
			log([
				'\nEncode or decode messages using the `Q` encoding (and UTF-8).',
				'\nUsage:\n',
				'\tq [-e | --encode] string',
				'\tq [-d | --decode] string',
				'\tq [-v | --version]',
				'\tq [-h | --help]',
				'\nExamples:\n',
				'\tq --encode \'foo = bar ©\'',
				'\techo \'foo_=3D_bar_=C2=A9\' | q --decode',
			].join('\n'));
			return process.exit(1);
		}

		if (/^(?:-v|--version)$/.test(option)) {
			log('v%s', q.version);
			return process.exit(1);
		}

		strings.forEach(function(string) {
			// Process options
			if (string == '-e' || string == '--encode') {
				action = 'encode';
				return;
			}
			if (string == '-d' || string == '--decode') {
				action = 'decode';
				return;
			}
			// Process string(s)
			var result;
			if (!action) {
				log('Error: q requires at least one option and a string argument.');
				log('Try `q --help` for more information.');
				return process.exit(1);
			}
			try {
				if (action == 'encode') {
					result = q.encode(utf8.encode(string, options));
				} else if (action == 'decode') {
					result = utf8.decode(q.decode(string, options));
				}
				log(result);
				count++;
			} catch (exception) {
				log(exception.message + '\n');
				log('Error: failed to %s.', action);
				log('If you think this is a bug in q-encoding, please report it:');
				log('https://github.com/mathiasbynens/q-encoding/issues/new');
				log('\nStack trace using q-encoding@%s:\n', q.version);
				log(exception.stack);
				return process.exit(1);
			}
		});
		if (!count) {
			log('Error: q requires a string argument.');
			log('Try `q --help` for more information.');
			return process.exit(1);
		}
		// Return with exit status 0 outside of the `forEach` loop, in case
		// multiple strings were passed in.
		return process.exit(0);
	};

	if (stdin.isTTY) {
		// handle shell arguments
		main();
	} else {
		// Either the script is called from within a non-TTY context, or `stdin`
		// content is being piped in.
		if (!process.stdout.isTTY) {
			// The script was called from a non-TTY context. This is a rather uncommon
			// use case we don’t actively support. However, we don’t want the script
			// to wait forever in such cases, so…
			timeout = setTimeout(function() {
				// …if no piped data arrived after a whole minute, handle shell
				// arguments instead.
				main();
			}, 60000);
		}
		data = '';
		stdin.on('data', function(chunk) {
			clearTimeout(timeout);
			data += chunk;
		});
		stdin.on('end', function() {
			strings.push(data.trim());
			main();
		});
		stdin.resume();
	}

}());
